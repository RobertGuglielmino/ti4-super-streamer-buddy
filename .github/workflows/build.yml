name: Build and Release Electron App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.20.0'
      timeout-minutes: 10
      
    - name: Install dependencies
      run: |
        npm config set legacy-peer-deps true
        npm install --no-audit --no-fund
      timeout-minutes: 15
      
    - name: Create simple build script (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo { "scripts": { "build-ci": "tsc && vite build && electron-builder --win --config.win.signAndEditExecutable=false" } } > build-script.json
        type package.json | findstr /v "scripts" > temp.json
        node -e "const pkg1 = require('./temp.json'); const pkg2 = require('./build-script.json'); const merged = {...pkg1, scripts: {...pkg1.scripts, ...pkg2.scripts}}; require('fs').writeFileSync('package.json', JSON.stringify(merged, null, 2));"
      
    - name: Create simple build script (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        echo '{ "scripts": { "build-ci": "tsc && vite build && electron-builder" } }' > build-script.json
        grep -v "scripts" package.json > temp.json
        node -e "const pkg1 = require('./temp.json'); const pkg2 = require('./build-script.json'); const merged = {...pkg1, scripts: {...pkg1.scripts, ...pkg2.scripts}}; require('fs').writeFileSync('package.json', JSON.stringify(merged, null, 2));"
      
    - name: Clean directories (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        if exist dist rmdir /s /q dist
        if exist dist-electron rmdir /s /q dist-electron
        if exist release rmdir /s /q release
      
    - name: Clean directories (macOS/Linux)
      if: matrix.os != 'windows-latest'
      run: |
        rm -rf dist dist-electron release
      
    - name: Build app
      run: npm run build-ci
      timeout-minutes: 30
      
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: release/*.exe
        
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: release/*.dmg
        
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest' && success()
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: release/*.AppImage
        
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'release' && success()
      with:
        files: |
          release/*.exe
          release/*.dmg
          release/*.AppImage
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
