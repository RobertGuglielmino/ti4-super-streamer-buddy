name: Build and Release Electron App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
      
    - name: Install dependencies
      run: |
        npm config set legacy-peer-deps true
        npm install --no-audit --no-fund
      
    - name: Clean directories
      run: npm run clean
      
    - name: Build TypeScript
      run: npx tsc
      
    - name: Create build directories
      run: |
        mkdir -p dist-electron/public
        mkdir -p build
      shell: bash
      
    - name: Copy HTML files to dist-electron
      run: |
        cp -r electron/public/* dist-electron/public/ || true
        echo "Files copied to dist-electron/public:"
        ls -la dist-electron/public || true
      shell: bash
      
    - name: Build Vite
      run: npx vite build
      
    - name: Debug dist directory after build
      run: |
        echo "Dist directory structure:"
        ls -la dist || true
        echo "Dist-electron directory structure:"
        ls -la dist-electron || true
        echo "Dist-electron/public directory:"
        ls -la dist-electron/public || true
      shell: bash
      
    - name: Create valid icon files for build
      run: |
        # Create a simple 256x256 PNG icon
        echo "Creating icon files..."
        
        # For Windows (ICO)
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          curl -o build/icon.ico https://raw.githubusercontent.com/electron/electron/main/shell/browser/resources/win/electron.ico
        fi
        
        # For macOS (ICNS)
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          curl -o build/icon.icns https://raw.githubusercontent.com/electron/electron/main/shell/browser/resources/mac/electron.icns
        fi
        
        # For Linux (PNG)
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          curl -o build/icon.png https://raw.githubusercontent.com/electron/electron/main/shell/browser/resources/default_app_icon.png
        fi
        
        # Fallback - download all icons for any platform
        curl -o build/icon.png https://raw.githubusercontent.com/electron/electron/main/shell/browser/resources/default_app_icon.png || true
        
        echo "Icon files created:"
        ls -la build/
      shell: bash
      
    - name: Build Electron with simplified config
      run: |
        # Create a temporary electron-builder config file
        cat > electron-builder-temp.yml << EOF
        appId: "com.ti4.superstreamerbuddy"
        productName: "TI4 Super Streamer Buddy"
        directories:
          output: "release"
          buildResources: "build"
        files:
          - "dist/**/*"
          - "dist-electron/**/*"
          - "package.json"
        extraResources:
          - from: "electron/public"
            to: "public"
          - from: "dist"
            to: "dist"
        asar: false
        EOF
        
        # Add platform-specific config
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "win:" >> electron-builder-temp.yml
          echo "  target: nsis" >> electron-builder-temp.yml
          echo "  icon: build/icon.ico" >> electron-builder-temp.yml
          npx electron-builder --win --config electron-builder-temp.yml --config.win.signAndEditExecutable=false --publish never
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          echo "mac:" >> electron-builder-temp.yml
          echo "  target: dmg" >> electron-builder-temp.yml
          echo "  icon: build/icon.icns" >> electron-builder-temp.yml
          npx electron-builder --mac --config electron-builder-temp.yml --publish never
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "linux:" >> electron-builder-temp.yml
          echo "  target: [\"AppImage\", \"deb\"]" >> electron-builder-temp.yml
          echo "  icon: build/icon.png" >> electron-builder-temp.yml
          npx electron-builder --linux --config electron-builder-temp.yml --publish never
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build
        path: |
          release/*.exe
          release/*.dmg
          release/*.AppImage
          release/*.snap
          release/*.deb
        if-no-files-found: ignore
        
    - name: Release assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.exe
          release/*.dmg
          release/*.AppImage
          release/*.snap
          release/*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
